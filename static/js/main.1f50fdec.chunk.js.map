{"version":3,"sources":["componets/FeedBackControls/FeedbackOptions.js","componets/Statistics/Statistics.js","componets/Section/Section.js","componets/App.js","index.js"],"names":["FeedBackControls","options","onLeaveFeedback","type","onClick","good","neutral","bad","Statistics","total","positivePercentage","Section","title","children","App","state","value","setState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","percentage","Number","isNaN","Math","round","this","posFeedBack","FeedbackOptions","Component","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"+TAwBeA,G,MAnBU,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACvB,oCACE,4BAAQC,KAAK,SAASC,QAAS,kBAAMF,EAAgBD,EAAQI,QAA7D,QAGA,4BAAQF,KAAK,SAASC,QAAS,kBAAMF,EAAgBD,EAAQK,WAA7D,WAGA,4BAAQH,KAAK,SAASC,QAAS,kBAAMF,EAAgBD,EAAQM,OAA7D,UCUWC,G,MAlBI,SAAC,GAAD,IAAGH,EAAH,EAAGA,KAAME,EAAT,EAASA,IAAKD,EAAd,EAAcA,QAASG,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,6BACE,sCAAYL,GACZ,yCAAeC,GACf,qCAAWC,GACX,uCAAaE,GACb,mDAAyBC,MCIdC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,iCACE,gCAAMD,GACLC,ICECC,E,4MAIJC,MAAQ,CACNV,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPL,gBAAkB,SAAAc,GAChB,EAAKC,SAAL,eACGD,EAAQ,EAAKD,MAAMC,GAAS,K,EAIjCE,mBAAqB,kBACnBC,OAAOC,OAAO,EAAKL,OAAOM,QAAO,SAACC,EAAKN,GAAN,OAAgBM,EAAMN,M,EAEzDO,gCAAkC,SAACd,EAAOJ,GACxC,IAAMmB,EAAcnB,EAAOI,EAAS,IACpC,OAAIgB,OAAOC,MAAMF,GACR,EAEFG,KAAKC,MAAMJ,I,uDAGV,IACAnB,EAASwB,KAAKd,MAAdV,KACAC,EAAYuB,KAAKd,MAAjBT,QACAC,EAAQsB,KAAKd,MAAbR,IACFE,EAAQoB,KAAKX,qBACbY,EAAcD,KAAKN,gCAAgCd,EAAOJ,GAMhE,OACE,oCACE,kBAAC,EAAD,CAASO,MAAM,yBACb,kBAACmB,EAAD,CACE9B,QATQ,CACdI,KAAM,OACNC,QAAS,UACTC,IAAK,OAOCL,gBAAiB2B,KAAK3B,oBAGxBG,GAAQC,GAAWC,GAAO,EAC1B,kBAAC,EAAD,CAASK,MAAM,cACb,kBAAC,EAAD,CACEP,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLE,MAAOA,EACPC,mBAAoBoB,KAIxB,sD,GAzDQE,aAAZlB,EAEGmB,aAAe,GA8DTnB,Q,MCjEfoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1f50fdec.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './FeedBackOptions.module.css';\r\n\r\nconst FeedBackControls = ({ options, onLeaveFeedback }) => (\r\n  <>\r\n    <button type=\"button\" onClick={() => onLeaveFeedback(options.good)}>\r\n      Good\r\n    </button>\r\n    <button type=\"button\" onClick={() => onLeaveFeedback(options.neutral)}>\r\n      Neutral\r\n    </button>\r\n    <button type=\"button\" onClick={() => onLeaveFeedback(options.bad)}>\r\n      Bad\r\n    </button>\r\n  </>\r\n);\r\n\r\nFeedBackControls.propTypes = {\r\n  options: PropTypes.object.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedBackControls;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, bad, neutral, total, positivePercentage }) => (\r\n  <div>\r\n    <span>Good:{good}</span>\r\n    <span>Neutral:{neutral}</span>\r\n    <span>Bad:{bad}</span>\r\n    <span>Total:{total}</span>\r\n    <span>Positive feedback:{positivePercentage}</span>\r\n  </div>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2> {title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React, { Component } from 'react';\r\n\r\nimport FeedbackOptions from './FeedBackControls/FeedbackOptions';\r\n\r\nimport Statistics from './Statistics/Statistics';\r\n\r\nimport Section from './Section/Section';\r\n\r\nclass App extends Component {\r\n  static propTypes = {};\r\n  static defaultProps = {};\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  onLeaveFeedback = value => {\r\n    this.setState({\r\n      [value]: this.state[value] + 1,\r\n    });\r\n  };\r\n\r\n  countTotalFeedback = () =>\r\n    Object.values(this.state).reduce((acc, value) => acc + value);\r\n\r\n  countPositiveFeedbackPercentage = (total, good) => {\r\n    const percentage = (good / total) * 100;\r\n    if (Number.isNaN(percentage)) {\r\n      return 0;\r\n    }\r\n    return Math.round(percentage);\r\n  };\r\n\r\n  render() {\r\n    const { good } = this.state;\r\n    const { neutral } = this.state;\r\n    const { bad } = this.state;\r\n    const total = this.countTotalFeedback();\r\n    const posFeedBack = this.countPositiveFeedbackPercentage(total, good);\r\n    const options = {\r\n      good: 'good',\r\n      neutral: 'neutral',\r\n      bad: 'bad',\r\n    };\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={options}\r\n            onLeaveFeedback={this.onLeaveFeedback}\r\n          />\r\n        </Section>\r\n        {(good || neutral || bad) > 0 ? (\r\n          <Section title=\"Statistics\">\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={total}\r\n              positivePercentage={posFeedBack}\r\n            />\r\n          </Section>\r\n        ) : (\r\n          <h2>No feedback given</h2>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './componets/App';\r\nimport './base.css';\r\n\r\nimport App from './componets/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}